node n1 {
    type router
    model router
    network-config {
	hostname Router1
	!
	interface eth1
	 ip address 192.0.3.1/24
	 ipv6 address 2001:db8:1::1/64
	!
	interface eth0
	 ip address 192.0.2.1/24
	 ipv6 address 2001:db8:0::1/64
	!
    }
    canvas c1
    iconcoords {389.0 387.0}
    labelcoords {396.0 436.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	meta=
	}
    }
    services {zebra OSPFv2 OSPFv3 vtysh IPForward}
}

node n2 {
    type router
    model host
    network-config {
	hostname FairyDGames
	!
	interface eth0
	 ip address 192.0.2.10/24
	 ipv6 address 2001:db8:0::10/64
	!
    }
    canvas c1
    iconcoords {193.0 221.0}
    labelcoords {189.0 270.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('fairyDGames.html', )
	cmdup=('python O_Servidor.py', 'python -m SimpleHTTPServer 80', )
	meta=Servidor.
	}
    }
    custom-config {
	custom-config-id service:UserDefined:fairyDGames.html
	custom-command fairyDGames.html
	config {
	<!DOCTYPE html>
	<html>
	<head>
		<title>FAIRY D GAMES</title>
	</head>
	<body>
		<p>Este é a Fairy D Games, uma empresa baseada para criação de jogos RPG </p>
	</body>
	</html>
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n3 {
    type hub
    network-config {
	hostname Switch
	!
    }
    canvas c1
    iconcoords {544.0 224.0}
    labelcoords {551.0 259.0}
    interface-peer {e0 n1}
    interface-peer {e1 n4}
    interface-peer {e2 n5}
}

node n4 {
    type router
    model PC
    network-config {
	hostname Alice
	!
	interface eth0
	 ip address 192.0.3.20/24
	 ipv6 address 2001:db8:1::20/64
	!
    }
    canvas c1
    iconcoords {451.0 131.0}
    labelcoords {450.0 183.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Cliente.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Cliente.py
	custom-command O_Cliente.py
	config {
	
	# Importacao da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.2.10'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	#frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	print "Do Servidor: ", fraseModificada
	
	# Python 3
	#print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n5 {
    type router
    model PC
    network-config {
	hostname Bob
	!
	interface eth0
	 ip address 192.0.3.21/24
	 ipv6 address 2001:db8:1::21/64
	!
    }
    canvas c1
    iconcoords {705.0 139.0}
    labelcoords {708.0 184.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Cliente.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Cliente.py
	custom-command O_Cliente.py
	config {
	# Importacao da biblioteca de socket
	from socket import *
	
	nomeServidor = '192.0.2.10'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	#frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	print "Do Servidor: ", fraseModificada
	
	# Python 3
	#print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

link l1 {
    nodes {n2 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

